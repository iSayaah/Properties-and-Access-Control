struct SwiftBank {


//private properties
private let password: String

private var balance: Double = 0 {
  didSet {
    if balance < 100 {
      displayLowBalanceMessage()
    }
  }
}

//static properties
static var depositBonusRate = 0.01

//Initializers
init(initialDeposit: Double, password: String) {
  self.password = password
  makeDeposit(ofAmount: initialDeposit)
  }

//internal methods
mutating func makeDeposit(ofAmount depositAmount: Double) {
  let depositWithBonus = finalDepositWithBonus(fromInitialDeposit: depositAmount)
  print("Making a deposit of a $\(depositAmount) with a bonus rate. The final amount deposited is $ \(depositWithBonus).")
  self.balance += depositWithBonus
}

mutating func displayBalance(usingPassword password: String) {
  if !isValid(password) {
    print("Error: Invalid password. Cannot retrieve balance.")
    return
  }
  print("Your current balance is $\(balance).")
}

mutating func makeWithdrawal(ofAmount withdrawalAmount: Double, usingPassword password: String) {
  if !isValid(password) {
    print("Error: Invalid password. Cannot make withdrawal.")
    return
  }
  print("Making $ \(withdrawalAmount) withdrawal.")
  self.balance -= withdrawalAmount
}

//private methods
private func isValid(_ enteredPassword: String) -> Bool {
  return password == enteredPassword
  }

private func finalDepositWithBonus(fromInitialDeposit deposit: Double) -> Double {
  return deposit + (deposit * SwiftBank.depositBonusRate)
  }

  private func displayLowBalanceMessage(){
    print("Alert: Your balance is under $100.")
  }
}

var myAccount = SwiftBank(initialDeposit: 500, password: "Satoshi")
//actions:
myAccount.makeDeposit(ofAmount: 50)
myAccount.makeWithdrawal(ofAmount: 100, usingPassword: "smasoth")
myAccount.displayBalance(usingPassword: "Satoshi")
